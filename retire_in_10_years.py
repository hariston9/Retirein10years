# -*- coding: utf-8 -*-
"""Retire in 10 years.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MVhLsQtNe2txknjr9lR6HfGSNQR4zBtU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Create Lists:

Year= []
Yearly_Income=[]
Yearly_Expenses=[]
Yearly_Investments=[]
Annual_Returns=[]

#Your yearly constant income 
income=100000
#Yearly constant expense
expense= income/2
#Average interest of 8% return per year
interest_rate=0.08
#You invest half of your return
investment=income/2
#calculating the annual annual return
annual_return=investment*interest_rate
#Getting the current year
year=2021

#Append the first values to the lists
Year.append(year)
Yearly_Income.append(income)
Yearly_Expenses.append(expense)
Yearly_Investments.append(investment)
Annual_Returns.append(annual_return)

#Loop for 'n' years
invested_years=20
for i in range(0, invested_years-1):
  #Updates the investment to be the previous investment plus the previous annual return plus half of your investment
  investment=investment +annual_return+ income/2
  #Update the annual return to be the current investment times the interest rate
  annual_return=investment*interest_rate
  #Append the new data to the  lists
  Year.append(year+i+1)
  Yearly_Income.append(income)
  Yearly_Expenses.append(expense)
  Yearly_Investments.append(investment)
  Annual_Returns.append(annual_return)

#Create a DataFrame
df=pd.DataFrame()
df['Year']=Year
df['Yearly_Income']=Yearly_Income

df['Annual_Returns']= Annual_Returns
df['Yearly_Expenses']= Yearly_Expenses
df['Yearly_Investments']=Yearly_Investments

df

#Visually show the date
plt.figure(figsize=(12.2, 4.5))
plt.plot(df['Year'], df['Yearly_Expenses'], label='Yearly_Expenses')
plt.plot(df['Year'], df['Annual_Returns'], label='Annual_Returns')
plt.xticks(rotation=45)
plt.title('Retire in 10 years')
plt.xlabel('Years')
plt.ylabel('returns')
plt.xticks(df['Year'])
plt.legend()
plt.show()

#Show the year/row where you can live off of returns
df[df.Yearly_Expenses <= df. Annual_Returns].head(1)